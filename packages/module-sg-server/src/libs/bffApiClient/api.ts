/* tslint:disable */
/* eslint-disable */
/**
 * sg-server
 * api for ssg
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HomeGETRes
 */
export interface HomeGETRes {
    /**
     * 
     * @type {Array<string>}
     * @memberof HomeGETRes
     */
    'mainVisualPaths': Array<string>;
}
/**
 * 
 * @export
 * @interface PhotoGalleryGETRes
 */
export interface PhotoGalleryGETRes {
    /**
     * 
     * @type {Array<PhotoGalleryGETResCardsInner>}
     * @memberof PhotoGalleryGETRes
     */
    'cards': Array<PhotoGalleryGETResCardsInner>;
}
/**
 * 
 * @export
 * @interface PhotoGalleryGETResCardsInner
 */
export interface PhotoGalleryGETResCardsInner {
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsInner
     */
    'imagePath': string;
    /**
     * 
     * @type {PhotoGalleryGETResCardsItemsLocation}
     * @memberof PhotoGalleryGETResCardsInner
     */
    'location': PhotoGalleryGETResCardsItemsLocation;
    /**
     * 
     * @type {PhotoGalleryGETResCardsItemsTakenAt}
     * @memberof PhotoGalleryGETResCardsInner
     */
    'takenAt': PhotoGalleryGETResCardsItemsTakenAt;
    /**
     * 
     * @type {Array<PhotoGalleryGETResCardsItemsTagsInner>}
     * @memberof PhotoGalleryGETResCardsInner
     */
    'tags': Array<PhotoGalleryGETResCardsItemsTagsInner>;
}
/**
 * 
 * @export
 * @interface PhotoGalleryGETResCardsItemsLocation
 */
export interface PhotoGalleryGETResCardsItemsLocation {
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsLocation
     */
    'locationId': string;
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsLocation
     */
    'locationName': string;
}
/**
 * 
 * @export
 * @interface PhotoGalleryGETResCardsItemsTagsInner
 */
export interface PhotoGalleryGETResCardsItemsTagsInner {
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsTagsInner
     */
    'tagId': string;
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsTagsInner
     */
    'tagName': string;
}
/**
 * 
 * @export
 * @interface PhotoGalleryGETResCardsItemsTakenAt
 */
export interface PhotoGalleryGETResCardsItemsTakenAt {
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsTakenAt
     */
    'yearMonth': string;
    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryGETResCardsItemsTakenAt
     */
    'viewTakenAt': string;
}

/**
 * SGApi - axios parameter creator
 * @export
 */
export const SGApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * for top page
         * @summary Get Main Visual Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiHome: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * for photo-gallery page
         * @summary Get all photos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPhotoGallery: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/photo-gallery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SGApi - functional programming interface
 * @export
 */
export const SGApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SGApiAxiosParamCreator(configuration)
    return {
        /**
         * for top page
         * @summary Get Main Visual Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiHome(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeGETRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiHome(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * for photo-gallery page
         * @summary Get all photos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPhotoGallery(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoGalleryGETRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPhotoGallery(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SGApi - factory interface
 * @export
 */
export const SGApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SGApiFp(configuration)
    return {
        /**
         * for top page
         * @summary Get Main Visual Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiHome(options?: any): AxiosPromise<HomeGETRes> {
            return localVarFp.getApiHome(options).then((request) => request(axios, basePath));
        },
        /**
         * for photo-gallery page
         * @summary Get all photos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPhotoGallery(options?: any): AxiosPromise<PhotoGalleryGETRes> {
            return localVarFp.getApiPhotoGallery(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SGApi - interface
 * @export
 * @interface SGApi
 */
export interface SGApiInterface {
    /**
     * for top page
     * @summary Get Main Visual Paths
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SGApiInterface
     */
    getApiHome(options?: AxiosRequestConfig): AxiosPromise<HomeGETRes>;

    /**
     * for photo-gallery page
     * @summary Get all photos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SGApiInterface
     */
    getApiPhotoGallery(options?: AxiosRequestConfig): AxiosPromise<PhotoGalleryGETRes>;

}

/**
 * SGApi - object-oriented interface
 * @export
 * @class SGApi
 * @extends {BaseAPI}
 */
export class SGApi extends BaseAPI implements SGApiInterface {
    /**
     * for top page
     * @summary Get Main Visual Paths
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SGApi
     */
    public getApiHome(options?: AxiosRequestConfig) {
        return SGApiFp(this.configuration).getApiHome(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * for photo-gallery page
     * @summary Get all photos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SGApi
     */
    public getApiPhotoGallery(options?: AxiosRequestConfig) {
        return SGApiFp(this.configuration).getApiPhotoGallery(options).then((request) => request(this.axios, this.basePath));
    }
}


